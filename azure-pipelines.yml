name: $(SourceBranchName)_$(date:yyyyMMdd)$(rev:.r)

pool:
  vmImage: $(imageName)

pr:
  branches:
    include:
    - master
    - develop
    - refs/tags/v*
  paths:
    exclude:
    - docs/*
    - README.md

trigger:
  branches:
    include:
    - master
    - develop
    - refs/tags/v*
  paths:
    exclude:
    - docs/*
    - readme.md

variables:
  buildConfiguration: 'Release'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE : true
  TestOutputDirectory: '$(Agent.TempDirectory)/TestResults'
  SONAR_PROJECT_KEY: 'gdriveano'
  SONAR_PROJECT_NAME: 'gdriveano'
  SONAR_ORG: fazzani-github

strategy:
  matrix:
    #linux:
    # imageName: 'ubuntu-16.04'
    windows:
      imageName: 'windows-2019'

steps:

- task: SonarCloudPrepare@1
  displayName: 'SonarCloud Prepare'
  inputs:
    SonarCloud: 'Sonarqube'
    organization: '$(SONAR_ORG)'
    projectKey: '$(SONAR_PROJECT_KEY)'
    projectName: '$(SONAR_PROJECT_NAME)'
    extraProperties: | 
      sonar.coverage.exclusions=**/*Tests.cs,**/obj/**,**/*.dll
      sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx

- task: UseDotNet@2 
  displayName: ".NET Core 3.1.x"
  inputs:
     version: '3.1.x'
     packageType: sdk

- task: DotNetCoreCLI@2
  displayName: '.NET restore'
  inputs:
    command: restore

- task: DotNetCoreCLI@2
  displayName: '.NET build $(buildConfiguration)'
  inputs:
    command: build
    arguments: '--no-restore -c $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: '.NET test $(buildConfiguration)'
  inputs:
    projects: '**/*Tests.csproj'
    command: test
    arguments: '--no-restore --no-build -p:Exclude=[xunit.*]* -c $(buildConfiguration) --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura,opencover'

- task: DotNetCoreCLI@2
  displayName: Install ReportGenerator Global Tool
  inputs:
    command: custom
    custom: tool
    arguments: install -g dotnet-reportgenerator-globaltool

- task: reportgenerator@4
  displayName: 'Merge Coverage reports'
  continueOnError: true
  inputs:
    reports: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
    targetdir: '$(TestOutputDirectory)/mergedcoveragereport'
    reporttypes: 'Cobertura'
    assemblyfilters: '-*Tests*'
    filefilters: '-*/Migrations/*.cs'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish Code Coverage report'
  continueOnError: true
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(TestOutputDirectory)/mergedcoveragereport/Cobertura.xml'

- task: CopyFiles@2
  displayName: 'Copy coverage files to $(Agent.TempDirectory)'
  inputs:
    sourceFolder: $(Agent.TempDirectory)
    contents: |
        TestResults/mergedcoveragereport/*.xml
    targetFolder: "$(Agent.TempDirectory)"
    overWrite: true
    flattenFolders: true

- task: SonarCloudAnalyze@1
  displayName: 'Run Code Analysis'
  continueOnError: true

- task: SonarCloudPublish@1
  displayName: 'Publish Quality Gate Result'
  continueOnError: true